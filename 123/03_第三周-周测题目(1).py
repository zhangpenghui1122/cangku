"""选择题(每题10分 ,共50分)1.	关于面向对象三大特征，观点错误的是：DA：封装的核心在于分B：继承的核心在于隔C：多态的核心在于做D：以上观点都不对""""""2.	关于导入方式，语法正确的是：BA：from 包 import 类B：from 模块 import 函数 as 别名C：import 包.模块 from *D：import *""""""3.	关于迭代，下列描述正确的是：CA：类中具有__iter__函数就是迭代器对象B：类中语句__next__函数就是可迭代对象C: 类中可以同时具有__iter__函数和__next__函数D：迭代器对象一定可以参与for循环。""""""4.	关于生成器，下列描述错误的是：DA：生成器函数返回生成器对象。B：生成器表达式返回生成器对象。C：函数返回多个结果时建议使用yield，返回单个结果时建议使用return。D：只能使用for循环获取生成器的内容""""""5.	关于lambda表达式，描述正确的是：AA: lambda 表达式就是没有名称的函数，因此都能被def定义的函数代替。B：lambda 表达式就是没有名称的函数，因此都能代替def定义的函数。C：lambda 表达式的函数体可以有多条语句D：lambda 表达式的参数只能有一个""""""编程题(每题12.5分，共50分)1. 创建函数，生成指定行数的杨辉三角。    杨辉三角：    每行端点与结尾的数为1，每个数是它左上方和右上方的数的和    输入：6    输出：         [                    [1],                   [1, 1],                  [1, 2, 1],                 [1, 3, 3, 1],               [1, 4, 6, 4, 1],             [1, 5, 10, 10, 5, 1]         ]""""""2.  "水仙花数":各位数字幂次方和等于该数本身    定义函数，根据位数计算水仙花数    输入：3    输出：[153, 370, 371, 407]"""for N in range(100, 1000):    n = str(N)    a = int(n[0])    b = int(n[1])    c = int(n[2])    if a ** 3 + b ** 3 + c ** 3 == N:        print(N)"""3. 二分查找    定义函数，在有序数字列表中找到目标值，并返回其索引。    如果目标值不在列表中，返回它可以按顺序插入的索引。    输入：[1,2,6,8,9]  8    输出：3    输入：[1,2,6,8,9]  5    输出：2"""list = [1, 2, 6, 8, 9]def Num(List1, t):    for i in List1:        if i >= t:            return list1.index(i)    if List1[0] >= t:        return 0    else:        return len(List1)print(list.index(8))for i in range(len(list) - 1):    if i == 3:        print(i)if __name__ == '__main__':    list1 = [1, 2, 6, 8, 9]    t = 5    Index = Num(list1, t)    print(Index)"""4. 根据值，对字典进行升序排列。    输入：{"张无忌":201,"赵敏":101,"小昭":105,"周芷若":302}    输出：[('赵敏', 101), ('小昭', 105), ('张无忌', 201), ('周芷若', 302)]"""dict01 = {"张无忌": 201, "赵敏": 101, "小昭": 105, "周芷若": 302}list = []for item in dict01.items():    list.append(item)for r in range(len(list) - 1):    for c in range(r + 1, len(list)):        if list[r][1] > list[c][1]:            list[r], list[c] = list[c], list[r]print(list)